/* 
Code fragments for fusion of an Euler yaw measurement from a 321 sequence.
*/

// calculate intermediate variables for observation jacobians
float t2 = q0 * q0;
float t3 = q1 * q1;
float t4 = q2 * q2;
float t5 = q3 * q3;
float t6 = t2 + t3 - t4 - t5;
float t7 = q0 * q3 * 2.0f;
float t8 = q1 * q2 * 2.0f;
float t9 = t7 + t8;
float t10 = 1.0f / (t6 * t6);
float t11 = t9 * t9;
float t12 = t10 * t11;
float t13 = t12 + 1.0f;
float t14 = 1.0f / t13;
float t15 = 1.0f / t6;

float H_YAW[3] = {};
H_YAW[1] = t14 * (t15 * (q0 * q1 * 2.0f - q2 * q3 * 2.0f) + t9 * t10 * (q0 * q2 * 2.0f + q1 * q3 * 2.0f));
H_YAW[2] = t14 * (t15 * (t2 - t3 + t4 - t5) + t9 * t10 * (t7 - t8));


// calculate intermediate expressions for Kalman gains
float t16 = q0 * q1 * 2.0f;
float t29 = q2 * q3 * 2.0f;
float t17 = t16 - t29;
float t18 = t15 * t17;
float t19 = q0 * q2 * 2.0f;
float t20 = q1 * q3 * 2.0f;
float t21 = t19 + t20;
float t22 = t9 * t10 * t21;
float t23 = t18 + t22;
float t40 = t14 * t23;
float t24 = t2 - t3 + t4 - t5;
float t25 = t15 * t24;
float t26 = t7 - t8;
float t27 = t9 * t10 * t26;
float t28 = t25 + t27;
float t41 = t14 * t28;
float t30 = P[1][1] * t40;
float t31 = P[1][2] * t40;
float t32 = P[2][2] * t41;
float t33 = t31 + t32;
float t34 = t41 * t33;
float t35 = P[2][1] * t41;
float t36 = t30 + t35;
float t37 = t40 * t36;
float t38 = R_YAW + t34 + t37; // Innovation variance
float t39 = 1.0f / t38;

// calculate Kalman gains
float Kfusion[24] = {};
Kfusion[0] = t39 * (P[0][1] * t40 + P[0][2] * t41);
Kfusion[1] = t39 * (t30 + P[1][2] * t41);
Kfusion[2] = t39 * (t32 + P[2][1] * t40);
Kfusion[3] = t39 * (P[3][1] * t40 + P[3][2] * t41);
Kfusion[4] = t39 * (P[4][1] * t40 + P[4][2] * t41);
Kfusion[5] = t39 * (P[5][1] * t40 + P[5][2] * t41);
Kfusion[6] = t39 * (P[6][1] * t40 + P[6][2] * t41);
Kfusion[7] = t39 * (P[7][1] * t40 + P[7][2] * t41);
Kfusion[8] = t39 * (P[8][1] * t40 + P[8][2] * t41);
Kfusion[9] = t39 * (P[9][1] * t40 + P[9][2] * t41);
Kfusion[10] = t39 * (P[10][1] * t40 + P[10][2] * t41);
Kfusion[11] = t39 * (P[11][1] * t40 + P[11][2] * t41);
Kfusion[12] = t39 * (P[12][1] * t40 + P[12][2] * t41);
Kfusion[13] = t39 * (P[13][1] * t40 + P[13][2] * t41);
Kfusion[14] = t39 * (P[14][1] * t40 + P[14][2] * t41);
Kfusion[15] = t39 * (P[15][1] * t40 + P[15][2] * t41);
Kfusion[16] = t39*(P[16][1]*t40+P[16][2]*t41);
Kfusion[17] = t39*(P[17][1]*t40+P[17][2]*t41);
Kfusion[18] = t39*(P[18][1]*t40+P[18][2]*t41);
Kfusion[19] = t39*(P[19][1]*t40+P[19][2]*t41);
Kfusion[20] = t39*(P[20][1]*t40+P[20][2]*t41);
Kfusion[21] = t39*(P[21][1]*t40+P[21][2]*t41);
Kfusion[22] = t39 * (P[22][1] * t40 + P[22][2] * t41);
Kfusion[23] = t39 * (P[23][1] * t40 + P[23][2] * t41);

/*
Code fragments for fusion of an Euler yaw measurement from a 312 sequence.
*/

// calculate intermediate variables
float t2 = q0 * q0;
float t3 = q1 * q1;
float t4 = q2 * q2;
float t5 = q3 * q3;
float t6 = t2 - t3 + t4 - t5;
float t7 = q0 * q3 * 2.0f;
float t10 = q1 * q2 * 2.0f;
float t8 = t7 - t10;
float t9 = 1.0f / (t6 * t6);
float t11 = t8 * t8;
float t12 = t9 * t11;
float t13 = t12 + 1.0f;
float t14 = 1.0f / t13;
float t15 = 1.0f / t6;
float t16 = q0 * q2 * 2.0f;
float t17 = q1 * q3 * 2.0f;
float t18 = t16 + t17;
float t19 = t15 * t18;
float t20 = q0 * q1 * 2.0f;
float t28 = q2 * q3 * 2.0f;
float t21 = t20 - t28;
float t29 = t8 * t9 * t21;
float t22 = t19 - t29;
float t23 = t2 + t3 - t4 - t5;
float t24 = t15 * t23;
float t25 = t7 + t10;
float t26 = t8 * t9 * t25;
float t27 = t24 + t26;
float t30 = P[0][0] * t14 * t22;
float t31 = P[0][2] * t14 * t22;
float t37 = P[2][2] * t14 * t27;
float t32 = t31 - t37;
float t39 = P[2][0] * t14 * t27;
float t33 = t30 - t39;
float t34 = t14 * t22 * t33;
float t38 = t14 * t27 * t32;
float t35 = R_YAW + t34 - t38;
float t36 = 1.0f / t35;
float t40 = q0;
float t41 = q1;
float t42 = q2;
float t43 = q3;
float t44 = t40 * t40;
float t45 = t41 * t41;
float t46 = t42 * t42;
float t47 = t43 * t43;
float t48 = t44 - t45 + t46 - t47;
float t49 = t40 * t43 * 2.0f;
float t53 = t41 * t42 * 2.0f;
float t50 = t49 - t53;
float t51 = 1.0f / (t48 * t48);
float t52 = 1.0f / t48;
float t54 = t50 * t50;
float t55 = t51 * t54;
float t56 = t55 + 1.0f;
float t57 = 1.0f / t56;

// calculate Kalman gains
float Kfusion[24] = {};
Kfusion[0] = -t36 * (t30 - P[0][2] * t14 * t27);
Kfusion[1] = -t36 * (P[1][0] * t14 * t22 - P[1][2] * t14 * t27);
Kfusion[2] = t36 * (t37 - P[2][0] * t14 * t22);
Kfusion[3] = -t36 * (P[3][0] * t14 * t22 - P[3][2] * t14 * t27);
Kfusion[4] = -t36 * (P[4][0] * t14 * t22 - P[4][2] * t14 * t27);
Kfusion[5] = -t36 * (P[5][0] * t14 * t22 - P[5][2] * t14 * t27);
Kfusion[6] = -t36 * (P[6][0] * t14 * t22 - P[6][2] * t14 * t27);
Kfusion[7] = -t36 * (P[7][0] * t14 * t22 - P[7][2] * t14 * t27);
Kfusion[8] = -t36 * (P[8][0] * t14 * t22 - P[8][2] * t14 * t27);
Kfusion[9] = -t36 * (P[9][0] * t14 * t22 - P[9][2] * t14 * t27);
Kfusion[10] = -t36 * (P[10][0] * t14 * t22 - P[10][2] * t14 * t27);
Kfusion[11] = -t36 * (P[11][0] * t14 * t22 - P[11][2] * t14 * t27);
Kfusion[12] = -t36 * (P[12][0] * t14 * t22 - P[12][2] * t14 * t27);
Kfusion[13] = -t36 * (P[13][0] * t14 * t22 - P[13][2] * t14 * t27);
Kfusion[14] = -t36 * (P[14][0] * t14 * t22 - P[14][2] * t14 * t27);
Kfusion[15] = -t36 * (P[15][0] * t14 * t22 - P[15][2] * t14 * t27);
Kfusion[16] = -t36*(P[16][0]*t14*t22-P[16][2]*t14*t27);
Kfusion[17] = -t36*(P[17][0]*t14*t22-P[17][2]*t14*t27);
Kfusion[18] = -t36*(P[18][0]*t14*t22-P[18][2]*t14*t27);
Kfusion[19] = -t36*(P[19][0]*t14*t22-P[19][2]*t14*t27);
Kfusion[20] = -t36*(P[20][0]*t14*t22-P[20][2]*t14*t27);
Kfusion[21] = -t36*(P[21][0]*t14*t22-P[21][2]*t14*t27);
Kfusion[22] = -t36 * (P[22][0] * t14 * t22 - P[22][2] * t14 * t27);
Kfusion[23] = -t36 * (P[23][0] * t14 * t22 - P[23][2] * t14 * t27);

// calculate observation jacobian
float H_YAW[3] = {};
H_YAW[0] = -t57 * (t52 * (t40 * t42 * 2.0f + t41 * t43 * 2.0f) - t50 * t51 * (t40 * t41 * 2.0f - t42 * t43 * 2.0f));
H_YAW[2] = t57 * (t52 * (t44 + t45 - t46 - t47) + t50 * t51 * (t49 + t53));
